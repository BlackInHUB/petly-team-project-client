{"version":3,"file":"static/js/361.8a42ed39.chunk.js","mappings":"yUAcMA,EAAgB,CAAEC,MAAO,GAAIC,SAAU,GAAIC,cAAc,GAEzDC,EAAmBC,EAAAA,GAAW,CAClCJ,MAAOI,EAAAA,KAEJC,QACC,8CACA,wBAEDC,SAAS,YACZL,SAAUG,EAAAA,KAEPG,IAAI,EAAG,sDACPC,IAAI,GAAI,sDACRH,QACC,kDACA,gEAEDC,SAAS,0BAGC,SAASG,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAgCC,EAAAA,EAAAA,KAAxBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WAEXC,EAAQ,mCAAG,WAAOC,EAAP,iFAAiBC,EAAjB,EAAiBA,cAAjB,kBAEPP,EAASQ,EAAAA,EAAAA,MAAqBF,IAFvB,WAGTF,EAHS,gCAGSJ,EAASQ,EAAAA,EAAAA,oBAHlB,uDAKbC,QAAQC,IAAI,KAAEC,SACdF,QAAQC,IAAI,SANC,yBAQbD,QAAQC,IAAIP,EAASC,GACrBG,GAAc,GATD,4EAAH,wDAad,OACE,SAAC,KAAD,CACElB,cAAeA,EACfgB,SAAUA,EACVZ,iBAAkBA,EAHpB,SAKG,gBAAGmB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,UAAC,KAAD,YACE,SAAC,KAAD,qBACA,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,QAAzB,UACE,SAAC,KAAD,UAAQJ,EAAQxB,MAAQuB,EAAOvB,MAAQ,UAEzC,4BACE,SAAC0B,EAAA,EAAD,CAAOC,KAAK,WAAW1B,UAAU,EAAM2B,KAAK,cAC5C,SAAC,KAAD,UAAQJ,EAAQvB,SAAWsB,EAAOtB,SAAW,cAGjD,4BACE,SAAC4B,EAAA,EAAD,CAAQC,KAAK,SAASC,SAAUT,EAAhC,SACGA,GAAe,SAACU,EAAA,EAAD,KAAoB,uCAEtC,SAAC,KAAD,UAAQnB,QAEV,6BACE,SAAC,KAAD,2CACA,SAAC,KAAD,CACEoB,GAAI,YAEJC,QAAS,WACPxB,EAASQ,EAAAA,EAAAA,cACV,EACDiB,KAAG,EANL,qBAEO,aAtBZ,GAmCN,C,6DCvFYC,EAAcC,EAAAA,GAAAA,IAAH,0RA0BlBC,EAAqB,8DAIdC,GAA6BF,EAAAA,EAAAA,IAAOG,EAAAA,EAAPH,CAAH,8BACnCC,GAESG,GAA6BJ,EAAAA,EAAAA,IAAOK,EAAAA,EAAPL,CAAH,8BACnCC,GAESK,GAAyBN,EAAAA,EAAAA,IAAOO,EAAAA,EAAPP,CAAH,8BAC/BC,GCjCW,SAASO,IACtB,IAAMC,EAAWC,OAAOC,WAAW,sCAC7BC,EAAWF,OAAOC,WACtB,8DAEIE,EAAOH,OAAOC,WAAW,uCAE/B,OACE,iCACE,SAACZ,EAAD,CAAaF,QAAS,SAAAiB,GAAC,OAAIA,EAAEC,iBAAN,EAAvB,UACE,SAAC3C,EAAD,MAEDqC,EAASzC,UAAW,SAACkC,EAAD,IACpBU,EAAS5C,UAAW,SAACoC,EAAD,IACpBS,EAAK7C,UAAW,SAACsC,EAAD,MAGtB,C","sources":["components/AuthForm/LoginForm.jsx","pages/LoginPage/style.js","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport authOperations from 'redux/auth/authOperations';\nimport { Formik } from 'formik';\nimport { FormStyled, Header, Error, NavLinkStyled, BottomText } from './style';\n\nimport Button from '../baseComponents/Button/Button';\nimport ButtonSpinner from 'components/baseComponents/ButtonSpinner/ButtonSpinner';\nimport Input from 'components/baseComponents/Input/Input';\nimport FieldsWrapper from 'components/baseComponents/FieldsWrapper/FieldsWrapper';\n\nimport * as yup from 'yup';\nimport { useAuth } from '../../hooks/useAuth';\n\nconst initialValues = { email: '', password: '', showPassword: false };\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .matches(\n      /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Invalid email format'\n    )\n    .required('Required'),\n  password: yup\n    .string()\n    .min(7, 'Password is too short - should be 7 chars minimum.')\n    .max(32, 'Password is too long - should be 32 chars maximum.')\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]*$/,\n      'Password can only contain Latin letters, and without spaces.'\n    )\n    .required('No password provided'),\n});\n\nexport default function LoginForm() {\n  const dispatch = useDispatch();\n  const { isError, isLoggedIn } = useAuth();\n\n  const onSubmit = async (values, { setSubmitting }) => {\n    try {\n      await dispatch(authOperations.login(values));\n      if (isLoggedIn) await dispatch(authOperations.fetchCurrentUser());\n    } catch (e) {\n      console.log(e.message);\n      console.log('catch');\n    } finally {\n      console.log(isError, isLoggedIn);\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({ isSubmitting, errors, touched }) => (\n        <FormStyled>\n          <Header>Login</Header>\n          <FieldsWrapper>\n            <Input name=\"email\" text=\"Email\">\n              <Error>{touched.email ? errors.email : null}</Error>\n            </Input>\n            <div>\n              <Input name=\"password\" password={true} text=\"Password\" />\n              <Error>{touched.password ? errors.password : null}</Error>\n            </div>\n          </FieldsWrapper>\n          <div>\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting ? <ButtonSpinner /> : <span>Login</span>}\n            </Button>\n            <Error>{isError}</Error>\n          </div>\n          <span>\n            <BottomText>Don't have an account? &nbsp;</BottomText>\n            <NavLinkStyled\n              to={'/register'}\n              key={'home'}\n              onClick={() => {\n                dispatch(authOperations.eraseErrors());\n              }}\n              end\n            >\n              Register\n            </NavLinkStyled>\n          </span>\n        </FormStyled>\n      )}\n    </Formik>\n  );\n}\n","import { ReactComponent as BackgroundMobileIcon } from '../../images/mobileBackground.svg';\nimport { ReactComponent as BackgroundTabletIcon } from '../../images/tabletBackground.svg';\nimport { ReactComponent as BackgroundPCIcon } from '../../images/pcBackground.svg';\n\nimport styled from 'styled-components';\n\nexport const PageWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  width: 100%;\n  z-index: 1;\n  transform: translateY(-50%);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  @media (min-width: 768px) {\n    align-items: center;\n  }\n`;\n\n// pointer-events: none;\n\n//   position: absolute;\n//   top: 0;\n//   bottom: 0;\n//   left: 0;\n//   right: 0;\n\n//   width: 100vw;\n//   height: 100vh;\n\nconst styleForBackgroundImg = `position: absolute;\nbottom: 0px;\nwidth: 100%;\nzIndex: 0;`;\nexport const BackgroundMobileIconStyled = styled(BackgroundMobileIcon)`\n  ${styleForBackgroundImg}\n`;\nexport const BackgroundTabletIconStyled = styled(BackgroundTabletIcon)`\n  ${styleForBackgroundImg}\n`;\nexport const BackgroundPCIconStyled = styled(BackgroundPCIcon)`\n  ${styleForBackgroundImg}\n`;\n","import React from 'react';\nimport LoginForm from '../../components/AuthForm/LoginForm';\n\nimport {\n  PageWrapper,\n  BackgroundMobileIconStyled,\n  BackgroundTabletIconStyled,\n  BackgroundPCIconStyled,\n} from './style';\n\nexport default function LoginPage() {\n  const isMobile = window.matchMedia('only screen and (max-width: 767px)');\n  const isTablet = window.matchMedia(\n    'only screen and (max-width: 1279px) and (min-width: 768px)'\n  );\n  const isPC = window.matchMedia('only screen and (min-width: 1280px)');\n\n  return (\n    <>\n      <PageWrapper onClick={e => e.stopPropagation()}>\n        <LoginForm />\n      </PageWrapper>\n      {isMobile.matches && <BackgroundMobileIconStyled />}\n      {isTablet.matches && <BackgroundTabletIconStyled />}\n      {isPC.matches && <BackgroundPCIconStyled />}\n    </>\n  );\n}\n"],"names":["initialValues","email","password","showPassword","validationSchema","yup","matches","required","min","max","LoginForm","dispatch","useDispatch","useAuth","isError","isLoggedIn","onSubmit","values","setSubmitting","authOperations","console","log","message","isSubmitting","errors","touched","FieldsWrapper","Input","name","text","Button","type","disabled","ButtonSpinner","to","onClick","end","PageWrapper","styled","styleForBackgroundImg","BackgroundMobileIconStyled","BackgroundMobileIcon","BackgroundTabletIconStyled","BackgroundTabletIcon","BackgroundPCIconStyled","BackgroundPCIcon","LoginPage","isMobile","window","matchMedia","isTablet","isPC","e","stopPropagation"],"sourceRoot":""}