{"version":3,"file":"static/js/993.3051a302.chunk.js","mappings":"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","sources":["pages/RegisterPage/style.js","components/baseComponents/PhoneInput/style.js","components/AuthForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { ReactComponent as BackgroundMobileIcon } from '../../images/mobileBackground.svg';\nimport { ReactComponent as BackgroundTabletIcon } from '../../images/tabletBackground.svg';\nimport { ReactComponent as BackgroundPCIcon } from '../../images/pcBackground.svg';\n\nimport styled from 'styled-components';\n\nexport const PageWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  width: 100%;\n  z-index: 1;\n  transform: translateY(-50%);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  @media (min-width: 768px) {\n    align-items: center;\n  }\n`;\n\nconst styleForBackgroundImg = `position: absolute;\nbottom: 0px;\nwidth: 100%;\nzIndex: 0;`;\nexport const BackgroundMobileIconStyled = styled(BackgroundMobileIcon)`\n  ${styleForBackgroundImg}\n`;\nexport const BackgroundTabletIconStyled = styled(BackgroundTabletIcon)`\n  ${styleForBackgroundImg}\n`;\nexport const BackgroundPCIconStyled = styled(BackgroundPCIcon)`\n  ${styleForBackgroundImg}\n`;\n","import PhoneInput from 'react-phone-input-2';\nimport './phoneInput.css';\n\nimport styled from 'styled-components';\n\nexport const MobPhoneInput = styled(PhoneInput)`\n  width: 100%;\n  #phone:hover,\n  #phone:focus {\n    border-color: ${p => p.theme.colors.hoveredAccent};\n    box-shadow: 0 0 0 1px ${p => p.theme.colors.hoveredAccent};\n  }\n  #phone {\n    background-color: ${p => p.theme.colors.background};     \n    }\n  }\n  .special-label {\n    position: absolute;\n      z-index: 1;\n      top: -7px;\n      left: 25px;\n      display: block;\n      color: ${p => p.theme.colors.text};\n\n      background: ${p => p.theme.colors.white};\n      padding: 0 5px;\n      font-size: 14px;\n\n      white-space: nowrap;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAuth } from 'hooks/useAuth';\nimport authOperations from 'redux/auth/authOperations';\nimport { Formik } from 'formik';\n\nimport Button from '../baseComponents/Button/Button';\nimport ButtonSpinner from '../baseComponents/ButtonSpinner/ButtonSpinner';\nimport Input from 'components/baseComponents/Input/Input';\nimport FieldsWrapper from '../baseComponents/FieldsWrapper/FieldsWrapper';\n\nimport { MobPhoneInput } from '../baseComponents/PhoneInput/style';\n\nimport {\n  FormStyled,\n  Header,\n  Error,\n  NavLinkStyled,\n  BottomText,\n  //PhoneInputStyled,\n} from './style';\nimport * as yup from 'yup';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  confirmPassword: '',\n  name: '',\n  city: '',\n  phone: '',\n};\n\nconst phoneRegExp = /^\\+\\d{7,15}$/;\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .matches(\n      /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Invalid email format'\n    )\n    .required('Required'),\n  password: yup\n    .string()\n    .min(7, 'Password is too short - should be 7 chars minimum.')\n    .max(32, 'Password is too long - should be 32 chars maximum.')\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]*$/,\n      'Password can only contain Latin letters, and without spaces.'\n    )\n    .required('No password provided'),\n  confirmPassword: yup.string().when('password', {\n    is: val => (val && val.length > 0 ? true : false),\n    then: yup\n      .string()\n      .oneOf([yup.ref('password')], 'Both password need to be the same'),\n  }),\n  name: yup.string().required('Required'),\n  city: yup\n    .string()\n    .matches(\n      /^\\s*([A-ZА-Я][a-zа-я]+,\\s?)?[A-ZА-Я][a-zа-я]+\\s*$/,\n      'put City, Region or only City'\n    )\n    .required('Required'),\n});\n\nexport default function RegisterForm() {\n  const [step, setStep] = useState(1);\n  const [nextError, setNextError] = useState(null);\n\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [isPhoneValid, setPhoneIsValid] = useState(null);\n\n  useEffect(() => {}, [step]);\n\n  const dispatch = useDispatch();\n\n  const { isError } = useAuth();\n\n  const onNext = (errors, values) => {\n    console.log(values);\n    if (!values.email || !values.password || !values.confirmPassword) {\n      setNextError('Please, enter all data');\n    }\n    if (\n      !errors.email &&\n      !errors.password &&\n      !errors.confirmPassword &&\n      values.email &&\n      values.password &&\n      values.confirmPassword\n    ) {\n      setStep(prevState => prevState + 1);\n      setNextError(null);\n      dispatch(authOperations.eraseErrors());\n    }\n  };\n\n  const onPrevious = () => {\n    setStep(prevState => prevState - 1);\n\n    dispatch(authOperations.eraseErrors());\n  };\n\n  const phoneValidation = () => {\n    return phoneRegExp.test(`+${phoneNumber}`);\n  };\n\n  const onBlurPhone = () => {\n    phoneValidation()\n      ? setPhoneIsValid(null)\n      : setPhoneIsValid('incorrect phone number');\n  };\n\n  const onSubmit = async (values, { setSubmitting }) => {\n    const { name, email, city, password } = values;\n    const phone = `+${phoneNumber}`;\n    const data = { name, email, city, phone, password };\n\n    try {\n      if (phoneValidation()) {\n        setPhoneIsValid(null);\n        await dispatch(authOperations.register(data));\n      } else setPhoneIsValid('incorrect phone number');\n    } catch (e) {\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting, errors, touched, values }) => (\n          <FormStyled>\n            <Header>Registration</Header>\n\n            <FieldsWrapper visible={step === 1 ? true : false}>\n              <Input name=\"email\" text=\"Email\">\n                <Error>{touched.email ? errors.email : null}</Error>\n              </Input>\n              <div>\n                <Input name=\"password\" password={true} text=\"Password\" />\n                <Error>{touched.password ? errors.password : null}</Error>\n              </div>\n              <div>\n                <Input\n                  name=\"confirmPassword\"\n                  password={true}\n                  text=\"Confirm Password\"\n                />\n                <Error>\n                  {touched.confirmPassword ? errors.confirmPassword : null}\n                </Error>\n              </div>\n            </FieldsWrapper>\n\n            <FieldsWrapper visible={step === 2 ? true : false}>\n              <Input name=\"name\" text=\"Name\">\n                <Error>{touched.name ? errors.name : null}</Error>\n              </Input>\n              <Input name=\"city\" text=\"City, region\">\n                <Error>{touched.city ? errors.city : null}</Error>\n              </Input>\n              <div>\n                <MobPhoneInput\n                  inputProps={{\n                    id: 'phone',\n                  }}\n                  onBlur={() => onBlurPhone()}\n                  countryCodeEditable={false}\n                  name=\"phone\"\n                  autoComplete=\"off\"\n                  country={'ua'}\n                  placeholder=\"Mobile phone\"\n                  value={phoneNumber}\n                  onChange={value => {\n                    setPhoneNumber(value);\n                  }}\n                />\n\n                {isPhoneValid ? <Error>{isPhoneValid}</Error> : null}\n              </div>\n            </FieldsWrapper>\n\n            <FieldsWrapper visible={step === 1 ? true : false}>\n              <Button onClick={() => onNext(errors, values)}>Next</Button>\n              <Error>{nextError}</Error>\n            </FieldsWrapper>\n\n            <FieldsWrapper visible={step === 2 ? true : false}>\n              <div>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? <ButtonSpinner /> : <span>Register</span>}\n                </Button>\n                <Error>{isError}</Error>\n              </div>\n              <div>\n                <Button\n                  buttonStyle=\"secondary\"\n                  disabled={isSubmitting}\n                  onClick={onPrevious}\n                >\n                  Back\n                </Button>\n              </div>\n            </FieldsWrapper>\n\n            <span>\n              <BottomText>Already have an account? &nbsp;</BottomText>\n              <NavLinkStyled\n                to={'/login'}\n                key={'home'}\n                onClick={() => {\n                  dispatch(authOperations.eraseErrors());\n                }}\n                end\n              >\n                Login\n              </NavLinkStyled>\n            </span>\n          </FormStyled>\n        )}\n      </Formik>\n    </>\n  );\n}\n","import React from 'react';\n\nimport {\n  PageWrapper,\n  BackgroundMobileIconStyled,\n  BackgroundTabletIconStyled,\n  BackgroundPCIconStyled,\n} from './style';\n\nimport RegisterForm from 'components/AuthForm/RegisterForm';\n\nexport default function RegisterPage() {\n  const isMobile = window.matchMedia('only screen and (max-width: 767px)');\n  const isTablet = window.matchMedia(\n    'only screen and (max-width: 1279px) and (min-width: 768px)'\n  );\n  const isPC = window.matchMedia('only screen and (min-width: 1280px)');\n\n  return (\n    <>\n      <PageWrapper>\n        <RegisterForm />\n      </PageWrapper>\n      {isMobile.matches && <BackgroundMobileIconStyled />}\n      {isTablet.matches && <BackgroundTabletIconStyled />}\n      {isPC.matches && <BackgroundPCIconStyled />}\n    </>\n  );\n}\n"],"names":["PageWrapper","styled","styleForBackgroundImg","BackgroundMobileIconStyled","BackgroundMobileIcon","BackgroundTabletIconStyled","BackgroundTabletIcon","BackgroundPCIconStyled","BackgroundPCIcon","MobPhoneInput","PhoneInput","p","theme","colors","hoveredAccent","background","text","white","initialValues","email","password","confirmPassword","name","city","phone","phoneRegExp","validationSchema","yup","matches","required","min","max","when","is","val","length","then","oneOf","RegisterForm","useState","step","setStep","nextError","setNextError","phoneNumber","setPhoneNumber","isPhoneValid","setPhoneIsValid","useEffect","dispatch","useDispatch","isError","useAuth","onPrevious","prevState","authOperations","phoneValidation","test","onSubmit","values","setSubmitting","data","isSubmitting","errors","touched","FieldsWrapper","visible","Input","inputProps","id","onBlur","countryCodeEditable","autoComplete","country","placeholder","value","onChange","Button","onClick","console","log","onNext","type","disabled","ButtonSpinner","buttonStyle","to","end","RegisterPage","isMobile","window","matchMedia","isTablet","isPC"],"sourceRoot":""}