{"version":3,"file":"static/js/193.413f887d.chunk.js","mappings":"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","sources":["pages/RegisterPage/style.js","components/baseComponents/FieldsWrapper/style.js","components/baseComponents/FieldsWrapper/FieldsWrapper.jsx","components/AuthForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { ReactComponent as BackgroundMobileIcon } from '../../images/mobileBackground.svg';\nimport { ReactComponent as BackgroundTabletIcon } from '../../images/tabletBackground.svg';\nimport { ReactComponent as BackgroundPCIcon } from '../../images/pcBackground.svg';\n\nimport styled from 'styled-components';\n\nexport const PageWrapper = styled.div`\n  width: 100vw;\n  height: 100%;\n  display: flex;\n  flexDirection: column;\n  justify-content: center;\n  align-items: start;\n  @media (min-width: 768px) {\n    align-items: center;\n  }\n}}`;\n\nconst styleForBackgroundImg = `position: absolute;\nbottom: 0px;\nwidth: 100%;\nzIndex: 0;`;\nexport const BackgroundMobileIconStyled = styled(BackgroundMobileIcon)`\n  ${styleForBackgroundImg}\n`;\nexport const BackgroundTabletIconStyled = styled(BackgroundTabletIcon)`\n  ${styleForBackgroundImg}\n`;\nexport const BackgroundPCIconStyled = styled(BackgroundPCIcon)`\n  ${styleForBackgroundImg}\n`;\n","import styled from 'styled-components';\n\nexport const Div = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n\n  gap: ${p => p.theme.space[5] + 'px'};\n\n  visibility: ${p => (p.visible ? 'visible' : 'hidden')};\n  display: ${p => (p.visible ? 'flex' : 'none')};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Div } from './style';\n\nconst FieldsWrapper = ({ visible, children }) => {\n  return <Div visible={visible}>{children}</Div>;\n};\n\nFieldsWrapper.propTypes = {\n  visible: PropTypes.bool,\n  children: PropTypes.any,\n};\n\nexport default FieldsWrapper;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAuth } from 'hooks/useAuth';\nimport authOperations from 'redux/auth/authOperations';\nimport { Formik } from 'formik';\n\nimport FieldsWrapper from '../baseComponents/FieldsWrapper/FieldsWrapper';\nimport {\n  FormStyled,\n  FieldStyled,\n  ButtonStyled,\n  Header,\n  Error,\n  NavLinkStyled,\n  BottomText,\n  ButtonType2Styled,\n  SpinnerStyled,\n  FieldWrapper,\n  Label,\n} from './style';\nimport * as yup from 'yup';\n\nimport PhoneInput from 'react-phone-input-2';\nimport './material.css';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  confirmPassword: '',\n  name: '',\n  city: '',\n  phone: '',\n};\n\nconst phoneRegExp = /^(\\+\\d{1,3}[- ]?)?\\d{10}$/;\n\nconst validationSchema = yup.object({\n  email: yup.string().email('Invalid email format').required('Required'),\n  password: yup\n    .string()\n    .min(8, 'Password is too short - should be 8 chars minimum.')\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]*$/,\n      'Password can only contain Latin letters.'\n    )\n    .required('No password provided'),\n  confirmPassword: yup.string().when('password', {\n    is: val => (val && val.length > 0 ? true : false),\n    then: yup\n      .string()\n      .oneOf([yup.ref('password')], 'Both password need to be the same'),\n  }),\n  name: yup.string().required('Required'),\n  city: yup.string().required('Required'),\n});\n\nexport default function RegisterForm() {\n  const [step, setStep] = useState(1);\n  const [nextError, setNextError] = useState(null);\n\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [isPhoneValid, setPhoneIsValid] = useState(null);\n\n  useEffect(() => {\n  }, [step]);\n\n  const dispatch = useDispatch();\n\n  const {isError} = useAuth();\n\n  const onNext = (errors, touched) => {\n    if (!touched.email || !touched.password || !touched.confirmPassword) {\n      setNextError('Fill all data');\n    }\n    if (\n      !errors.email &&\n      !errors.password &&\n      !errors.confirmPassword &&\n      touched.email &&\n      touched.password &&\n      touched.confirmPassword\n    ) {\n      setStep(prevState => prevState + 1);\n      setNextError(null);\n    }\n  };\n\n  const onPrevious = () => {\n    setStep(prevState => prevState - 1);\n  };\n\n  const phoneValidation = () => {\n    return phoneRegExp.test(`+${phoneNumber}`);\n  };\n\n  const onSubmit = (values, { setSubmitting }) => {\n    const { name, email, city, password } = values;\n    const phone = `+${phoneNumber}`;\n    const data = { name, email, city, phone, password };\n\n    if (phoneValidation()) {\n      setPhoneIsValid(null);\n\n      dispatch(authOperations.register(data));\n\n    } else setPhoneIsValid('incorrect phone number');\n    setSubmitting(false);\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting, errors, touched }) => (\n          <FormStyled>\n            <Header>Registration</Header>\n\n            <FieldsWrapper visible={step === 1 ? true : false}>\n              <FieldWrapper>\n                <FieldStyled id=\"email\" name=\"email\" required />\n                <Label htmlFor=\"email\">Email</Label>\n                <Error>{touched.email ? errors.email : null}</Error>\n              </FieldWrapper>\n\n              <FieldWrapper>\n                <FieldStyled\n                  id=\"password\"\n                  type=\"password\"\n                  name=\"password\"\n                  autoComplete=\"new-password\"\n                  required\n                />\n                <Label htmlFor=\"password\">Password</Label>\n                <Error>{touched.password ? errors.password : null}</Error>\n              </FieldWrapper>\n              <FieldWrapper>\n                <FieldStyled\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  autoComplete=\"new-password\"\n                  required\n                />\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <Error>\n                  {touched.confirmPassword ? errors.confirmPassword : null}\n                </Error>\n              </FieldWrapper>\n            </FieldsWrapper>\n\n            <FieldsWrapper visible={step === 2 ? true : false}>\n              <FieldWrapper>\n                <FieldStyled\n                  id=\"name\"\n                  name=\"name\"\n                  autoComplete=\"off\"\n                  required\n                />\n                <Label htmlFor=\"name\">Name</Label>\n                <Error>{touched.name ? errors.name : null}</Error>\n              </FieldWrapper>\n              <FieldWrapper>\n                <FieldStyled\n                  id=\"city\"\n                  name=\"city\"\n                  autoComplete=\"off\"\n                  required\n                />\n                <Label htmlFor=\"city\">City, region</Label>\n                <Error>{touched.city ? errors.city : null}</Error>\n              </FieldWrapper>\n              <div>\n                <PhoneInput\n                  inputProps={{\n                    id: 'phone',\n                  }}\n                  name=\"phone\"\n                  autoComplete=\"off\"\n                  country={'ua'}\n                  placeholder=\"Mobile phone\"\n                  value={phoneNumber}\n                  onChange={value => setPhoneNumber(value)}\n                />\n\n                {isPhoneValid ? <Error>{isPhoneValid}</Error> : null}\n              </div>\n            </FieldsWrapper>\n\n            <FieldsWrapper visible={step === 1 ? true : false}>\n              <ButtonStyled\n                type=\"button\"\n                onClick={() => onNext(errors, touched)}\n              >\n                Next\n              </ButtonStyled>\n              <Error>{nextError}</Error>\n            </FieldsWrapper>\n\n            <FieldsWrapper visible={step === 2 ? true : false}>\n              <div>\n                <ButtonStyled type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? (\n                    <SpinnerStyled icon=\"fa-solid fa-spinner\" size=\"1.5rem\" />\n                  ) : (\n                    <span>Register</span>\n                  )}\n                </ButtonStyled>\n                <Error>{isError}</Error>\n              </div>\n              <div>\n                <ButtonType2Styled\n                  type=\"button\"\n                  disabled={isSubmitting}\n                  onClick={onPrevious}\n                >\n                  Back\n                </ButtonType2Styled>\n              </div>\n            </FieldsWrapper>\n\n            <span>\n              <BottomText>Already have an account? &nbsp;</BottomText>\n              <NavLinkStyled\n                to={'/login'}\n                key={'home'}\n                end\n              >\n                Login\n              </NavLinkStyled>\n            </span>\n          </FormStyled>\n        )}\n      </Formik>\n    </>\n  );\n}\n","import React from 'react';\n\nimport {\n  PageWrapper,\n  BackgroundMobileIconStyled,\n  BackgroundTabletIconStyled,\n  BackgroundPCIconStyled,\n} from './style';\n\nimport RegisterForm from 'components/AuthForm/RegisterForm';\n\nexport default function RegisterPage() {\n  const isMobile = window.matchMedia('only screen and (max-width: 767px)');\n  const isTablet = window.matchMedia(\n    'only screen and (max-width: 1279px) and (min-width: 768px)'\n  );\n  const isPC = window.matchMedia('only screen and (min-width: 1280px)');\n\n  return (\n    <>\n      <PageWrapper>\n        <RegisterForm />\n      </PageWrapper>\n      {isMobile.matches && <BackgroundMobileIconStyled />}\n      {isTablet.matches && <BackgroundTabletIconStyled />}\n      {isPC.matches && <BackgroundPCIconStyled />}\n    </>\n  );\n}\n"],"names":["PageWrapper","styled","styleForBackgroundImg","BackgroundMobileIconStyled","BackgroundMobileIcon","BackgroundTabletIconStyled","BackgroundTabletIcon","BackgroundPCIconStyled","BackgroundPCIcon","Div","p","theme","space","visible","children","initialValues","email","password","confirmPassword","name","city","phone","phoneRegExp","validationSchema","yup","required","min","matches","when","is","val","length","then","oneOf","RegisterForm","useState","step","setStep","nextError","setNextError","phoneNumber","setPhoneNumber","isPhoneValid","setPhoneIsValid","useEffect","dispatch","useDispatch","isError","useAuth","onPrevious","prevState","onSubmit","values","setSubmitting","data","test","authOperations","isSubmitting","errors","touched","id","htmlFor","type","autoComplete","inputProps","country","placeholder","value","onChange","onClick","onNext","disabled","icon","size","to","end","RegisterPage","isMobile","window","matchMedia","isTablet","isPC"],"sourceRoot":""}