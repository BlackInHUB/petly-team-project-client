{"version":3,"file":"static/js/361.f1ccf274.chunk.js","mappings":"wRAiBMA,EAAgB,CAAEC,MAAO,GAAIC,SAAU,IAEvCC,EAAmBC,EAAAA,GAAW,CAClCH,MAAOG,EAAAA,KAAaH,MAAM,wBAAwBI,SAAS,YAC3DH,SAAUE,EAAAA,KAEPE,IAAI,EAAG,sDACPC,QACC,kDACA,4CAEDF,SAAS,0BAGC,SAASG,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,OAAf,IAC3BI,GAAaH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,UAAf,IAC9BC,EAAQ,mCAAG,WAAOC,EAAP,iFAAiBC,EAAjB,EAAiBA,cAChCC,QAAQC,IAAIH,GADG,kBAIPR,EAASY,EAAAA,EAAAA,MAAqBJ,IAJvB,WAKTF,EALS,gCAKSN,EAASY,EAAAA,EAAAA,oBALlB,yDAObF,QAAQC,IAAI,KAAEE,SACdH,QAAQC,IAAI,SARC,yBAUbD,QAAQC,IAAI,WACZF,GAAc,GAXD,6EAAH,wDAed,OACE,SAAC,KAAD,CACElB,cAAeA,EACfgB,SAAUA,EACVb,iBAAkBA,EAHpB,SAKG,gBAAGoB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,UAAC,KAAD,YACE,SAAC,KAAD,qBACA,UAAC,KAAD,YACE,4BACE,SAAC,KAAD,CAAaC,GAAG,QAAQC,KAAK,QAAQC,YAAY,WACjD,SAAC,KAAD,UAAQH,EAAQxB,MAAQuB,EAAOvB,MAAQ,WAGzC,4BACE,SAAC,KAAD,CACEyB,GAAG,WACHG,KAAK,WACLF,KAAK,WACLC,YAAY,cAGd,SAAC,KAAD,UAAQH,EAAQvB,SAAWsB,EAAOtB,SAAW,cAGjD,4BACE,SAAC,KAAD,CAAc2B,KAAK,SAASC,SAAUP,EAAtC,SACGA,GACC,SAAC,KAAD,CAAeQ,KAAK,sBAAsBC,KAAK,YAE/C,uCAGJ,SAAC,KAAD,UAAQrB,QAEV,6BACE,SAAC,KAAD,2CACA,SAAC,KAAD,CACEsB,GAAI,YAEJC,QAAS,WACPzB,EAASY,EAAAA,EAAAA,cACV,EACDc,KAAG,EANL,qBAEO,aAlCZ,GA+CN,C,6DCjGYC,EAAcC,EAAAA,GAAAA,IAAH,yNAYlBC,EAAqB,8DAIdC,GAA6BF,EAAAA,EAAAA,IAAOG,EAAAA,EAAPH,CAAH,8BACnCC,GAESG,GAA6BJ,EAAAA,EAAAA,IAAOK,EAAAA,EAAPL,CAAH,8BACnCC,GAESK,GAAyBN,EAAAA,EAAAA,IAAOO,EAAAA,EAAPP,CAAH,8BAC/BC,GCnBW,SAASO,IACtB,IAAMC,EAAWC,OAAOC,WAAW,sCAC7BC,EAAWF,OAAOC,WACtB,8DAEIE,EAAOH,OAAOC,WAAW,uCAE/B,OACE,iCACE,SAACZ,EAAD,WACE,SAAC5B,EAAD,MAEDsC,EAASvC,UAAW,SAACgC,EAAD,IACpBU,EAAS1C,UAAW,SAACkC,EAAD,IACpBS,EAAK3C,UAAW,SAACoC,EAAD,MAGtB,C","sources":["components/AuthForm/LoginForm.jsx","pages/LoginPage/style.js","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport authOperations from 'redux/auth/authOperations';\nimport { Formik } from 'formik';\nimport {\n  FormStyled,\n  FieldStyled,\n  ButtonStyled,\n  Header,\n  Error,\n  FieldsWrapper,\n  NavLinkStyled,\n  BottomText,\n  SpinnerStyled,\n} from './style';\nimport * as yup from 'yup';\n\nconst initialValues = { email: '', password: '' };\n\nconst validationSchema = yup.object({\n  email: yup.string().email('Invalid email format').required('Required'),\n  password: yup\n    .string()\n    .min(8, 'Password is too short - should be 8 chars minimum.')\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]*$/,\n      'Password can only contain Latin letters.'\n    )\n    .required('No password provided'),\n});\n\nexport default function LoginForm() {\n  const dispatch = useDispatch();\n  const isError = useSelector(state => state.auth.isError);\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n  const onSubmit = async (values, { setSubmitting }) => {\n    console.log(values);\n\n    try {\n      await dispatch(authOperations.login(values));\n      if (isLoggedIn) await dispatch(authOperations.fetchCurrentUser());\n    } catch (e) {\n      console.log(e.message);\n      console.log('catch');\n    } finally {\n      console.log('finally');\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({ isSubmitting, errors, touched }) => (\n        <FormStyled>\n          <Header>Login</Header>\n          <FieldsWrapper>\n            <div>\n              <FieldStyled id=\"email\" name=\"email\" placeholder=\"Email\" />\n              <Error>{touched.email ? errors.email : null}</Error>\n            </div>\n\n            <div>\n              <FieldStyled\n                id=\"password\"\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n              />\n\n              <Error>{touched.password ? errors.password : null}</Error>\n            </div>\n          </FieldsWrapper>\n          <div>\n            <ButtonStyled type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting ? (\n                <SpinnerStyled icon=\"fa-solid fa-spinner\" size=\"1.5rem\" />\n              ) : (\n                <span>Login</span>\n              )}\n            </ButtonStyled>\n            <Error>{isError}</Error>\n          </div>\n          <span>\n            <BottomText>Don't have an account? &nbsp;</BottomText>\n            <NavLinkStyled\n              to={'/register'}\n              key={'home'}\n              onClick={() => {\n                dispatch(authOperations.eraseErrors());\n              }}\n              end\n            >\n              Register\n            </NavLinkStyled>\n          </span>\n        </FormStyled>\n      )}\n    </Formik>\n  );\n}\n","import { ReactComponent as BackgroundMobileIcon } from '../../images/mobileBackground.svg';\nimport { ReactComponent as BackgroundTabletIcon } from '../../images/tabletBackground.svg';\nimport { ReactComponent as BackgroundPCIcon } from '../../images/pcBackground.svg';\n\nimport styled from 'styled-components';\n\nexport const PageWrapper = styled.div`\n  width: 100vw;\n  height: 100%;\n  display: flex;\n  flexDirection: column;\n  justify-content: center;\n  align-items: start;\n  @media (min-width: 768px) {\n    align-items: center;\n  }\n}}`;\n\nconst styleForBackgroundImg = `position: absolute;\nbottom: 0px;\nwidth: 100%;\nzIndex: 0;`;\nexport const BackgroundMobileIconStyled = styled(BackgroundMobileIcon)`\n  ${styleForBackgroundImg}\n`;\nexport const BackgroundTabletIconStyled = styled(BackgroundTabletIcon)`\n  ${styleForBackgroundImg}\n`;\nexport const BackgroundPCIconStyled = styled(BackgroundPCIcon)`\n  ${styleForBackgroundImg}\n`;\n","import React from 'react';\nimport LoginForm from '../../components/AuthForm/LoginForm';\n\nimport {\n  PageWrapper,\n  BackgroundMobileIconStyled,\n  BackgroundTabletIconStyled,\n  BackgroundPCIconStyled,\n} from './style';\n\nexport default function LoginPage() {\n  const isMobile = window.matchMedia('only screen and (max-width: 767px)');\n  const isTablet = window.matchMedia(\n    'only screen and (max-width: 1279px) and (min-width: 768px)'\n  );\n  const isPC = window.matchMedia('only screen and (min-width: 1280px)');\n\n  return (\n    <>\n      <PageWrapper>\n        <LoginForm />\n      </PageWrapper>\n      {isMobile.matches && <BackgroundMobileIconStyled />}\n      {isTablet.matches && <BackgroundTabletIconStyled />}\n      {isPC.matches && <BackgroundPCIconStyled />}\n    </>\n  );\n}\n"],"names":["initialValues","email","password","validationSchema","yup","required","min","matches","LoginForm","dispatch","useDispatch","isError","useSelector","state","auth","isLoggedIn","onSubmit","values","setSubmitting","console","log","authOperations","message","isSubmitting","errors","touched","id","name","placeholder","type","disabled","icon","size","to","onClick","end","PageWrapper","styled","styleForBackgroundImg","BackgroundMobileIconStyled","BackgroundMobileIcon","BackgroundTabletIconStyled","BackgroundTabletIcon","BackgroundPCIconStyled","BackgroundPCIcon","LoginPage","isMobile","window","matchMedia","isTablet","isPC"],"sourceRoot":""}